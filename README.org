* cl-frame
cl-frame is inspired from [[https://github.com/smallnest/goframe][goframe]]. cl-frame provides read-frame and write-frame function for stream to send and receive framed data.
cl-frame planed to implement
+ [DONE] length-field-based-frame-codec
+ [DONE] fixed-length-frame-codec
+ [DONE] line-based-frame-codec
+ [DONE] delimiter-based-frame-codec
** methods definition
*** write-frame
keyward arguments *only work* for length-field-based-frame-codec. For length-field-based-frame-codec need to pretend a header.
keyward arguments not work for "fixed-length-frame-codec", "line-based-frame-codec", "delimited-based-frame-codec"
#+begin_src lisp
  (defgeneric write-frame (obj buf &key &allow-other-keys)
    (:documentation "pack buf to frame and send it")
    )
#+end_src
*** read-frame
#+begin_src lisp
  (defgeneric read-frame (obj buf))
#+end_src
** examples
You can find examples in tests/read-write-frame-tests.lisp. Each test entry is a read and write frame pair.
*I will only introduce length-field-based-frame-codec here for the reason it`s the most complicated codec.*
*** length-field-based-frame-codec
length-field-based-frame is one frame package way who makes a fixed length field as the header of a frame to represent the length of the whole msg or only content。
#+begin_src text
  BEFORE DECODE (14 bytes)         AFTER DECODE (14 bytes)
  +--------+----------------+      +--------+----------------+
  | Length | Actual Content |----->| Length | Actual Content |
  | 0x000C | "HELLO, WORLD" |      | 0x000C | "HELLO, WORLD" |
  +--------+----------------+      +--------+----------------+
#+end_src
It`s can be simple just like above。But it`s also can be complicated.
#+begin_src text
   BEFORE DECODE (16 bytes)                       AFTER DECODE (13 bytes)
   +------+--------+------+----------------+      +------+----------------+
   | HDR1 | Length | HDR2 | Actual Content |----->| HDR2 | Actual Content |
   | 0xCA | 0x000C | 0xFE | "HELLO, WORLD" |      | 0xFE | "HELLO, WORLD" |
   +------+--------+------+----------------+      +------+----------------+
#+end_src

I use a paired config struct to control how to encoded and decode frame. 
#+begin_src lisp
  (defstruct (encoder-config (:conc-name enc-))
    ;; config for encoder
    (byte-order big-endian :type (or bigendian littlendian)) ;; byte order of the message
    (length-field-length 0 :type integer) ;; length of the length field to hold the length of the message
    (length-field-offset 0 :type integer) ;; length field start position
    (length-adjustment 0 :type integer)   ;; compensation for the msg length
    (length-includes-length-field-length nil :type boolean) ;; whether include the length field length in the msg length
    )

  (defstruct (decoder-config (:conc-name dec-))
    ;; config for decoder
    (byte-order big-endian :type (or bigendian littlendian)) ;; byte order of the message
    (length-field-offset 0 :type integer) ;; begin position of the length field
    (length-field-length 0 :type integer) ;; length of the length field to hold the length of the message
    (length-adjustment 0 :type integer)   ;; compensation for the msg length
    (initial-bytes-to-strip 0 :type integer) ;; initial bytes to strip from the message
    )
#+end_src
for a 2 bytes length field at offset 0, do not strip header length-field-frame-codec.
You need to instantiate encoder-config and decoder-config, then use them to instantiate length-field-based-frame-codec 
#+begin_src lisp
  (defparameter enc-config (cl-frame:make-encoder-config :byte-order cl-frame:big-endian
                                                         :length-field-length 2
                                                         :length-adjustment 0
                                                         :length-includes-length-field-length nil))
  (defparameter dec-config (cl-frame:make-decoder-config :byte-order cl-frame:big-endian
                                                         :length-field-offset 0
                                                         :length-field-length 2
                                                         :length-adjustment 0
                                                         :initial-bytes-to-strip 0))

  (defparameter length-field-based-frame-codec (make-instance 'cl-frame:length-field-based-frame-codec
                                                              :encoder-config enc-config
                                                              :decoder-config dec-config
                                                              :iostream stream))
#+end_src
now you can use write-frame and read-frame to send and receive frame data
#+begin_src lisp
  (cl-frame:write-frame length-field-based-frame-codec msg :header nil) ;; header is what you want to pretend to the whole msg
  (cl-frame:read-frame length-field-based-frame-codec)
#+end_src

For how config struct`s parameters controlled the format of the frame. I has copy descriptions from Netty javadoc and implement all of them in tests/read-write-frame-tests.lisp

**** 2 bytes length field at offset 0, strip header

Because we can get the length of the content by calling ByteBuf.readableBytes(), you might want to strip the length field by specifying initialBytesToStrip. In this example, we specified 2, that is same with the length of the length field, to strip the first two bytes.

#+begin_src text
 lengthFieldOffset   = 0
 lengthFieldLength   = 2
 lengthAdjustment    = 0
 initialBytesToStrip = 2 (= the length of the Length field)

 BEFORE DECODE (14 bytes)         AFTER DECODE (12 bytes)
 +--------+----------------+      +----------------+
 | Length | Actual Content |----->| Actual Content |
 | 0x000C | "HELLO, WORLD" |      | "HELLO, WORLD" |
 +--------+----------------+      +----------------+

#+end_src

**** 2 bytes length field at offset 0, do not strip header, the length field represents the length of the whole message

In most cases, the length field represents the length of the message body only, as shown in the previous examples. However, in some protocols, the length field represents the length of the whole message, including the message header. In such a case, we specify a non-zero lengthAdjustment. Because the length value in this example message is always greater than the body length by 2, we specify -2 as lengthAdjustment for compensation.

#+begin_src text
 lengthFieldOffset   =  0
 lengthFieldLength   =  2
 lengthAdjustment    = -2 (= the length of the Length field)
 initialBytesToStrip =  0

 BEFORE DECODE (14 bytes)         AFTER DECODE (14 bytes)
 +--------+----------------+      +--------+----------------+
 | Length | Actual Content |----->| Length | Actual Content |
 | 0x000E | "HELLO, WORLD" |      | 0x000E | "HELLO, WORLD" |
 +--------+----------------+      +--------+----------------+
#+end_src

**** 3 bytes length field at the end of 5 bytes header, do not strip header

The following message is a simple variation of the first example. An extra header value is prepended to the message. lengthAdjustment is zero again because the decoder always takes the length of the prepended data into account during frame length calculation.

#+begin_src text
 lengthFieldOffset   = 2 (= the length of Header 1)
 lengthFieldLength   = 3
 lengthAdjustment    = 0
 initialBytesToStrip = 0

 BEFORE DECODE (17 bytes)                      AFTER DECODE (17 bytes)
 +----------+----------+----------------+      +----------+----------+----------------+
 | Header 1 |  Length  | Actual Content |----->| Header 1 |  Length  | Actual Content |
 |  0xCAFE  | 0x00000C | "HELLO, WORLD" |      |  0xCAFE  | 0x00000C | "HELLO, WORLD" |
 +----------+----------+----------------+      +----------+----------+----------------+
#+end_src

**** 3 bytes length field at the beginning of 5 bytes header, do not strip header

This is an advanced example that shows the case where there is an extra header between the length field and the message body. You have to specify a positive lengthAdjustment so that the decoder counts the extra header into the frame length calculation.
#+begin_src text
 lengthFieldOffset   = 0
 lengthFieldLength   = 3
 lengthAdjustment    = 2 (= the length of Header 1)
 initialBytesToStrip = 0

 BEFORE DECODE (17 bytes)                      AFTER DECODE (17 bytes)
 +----------+----------+----------------+      +----------+----------+----------------+
 |  Length  | Header 1 | Actual Content |----->|  Length  | Header 1 | Actual Content |
 | 0x00000C |  0xCAFE  | "HELLO, WORLD" |      | 0x00000C |  0xCAFE  | "HELLO, WORLD" |
 +----------+----------+----------------+      +----------+----------+----------------+
#+end_src

**** 2 bytes length field at offset 1 in the middle of 4 bytes header, strip the first header field and the length field

This is a combination of all the examples above. There are the prepended header before the length field and the extra header after the length field. The prepended header affects the lengthFieldOffset and the extra header affects the lengthAdjustment. We also specified a non-zero initialBytesToStrip to strip the length field and the prepended header from the frame. If you don't want to strip the prepended header, you could specify 0 for initialBytesToSkip.

#+begin_src text
 lengthFieldOffset   = 1 (= the length of HDR1)
 lengthFieldLength   = 2
 lengthAdjustment    = 1 (= the length of HDR2)
 initialBytesToStrip = 3 (= the length of HDR1 + LEN)

 BEFORE DECODE (16 bytes)                       AFTER DECODE (13 bytes)
 +------+--------+------+----------------+      +------+----------------+
 | HDR1 | Length | HDR2 | Actual Content |----->| HDR2 | Actual Content |
 | 0xCA | 0x000C | 0xFE | "HELLO, WORLD" |      | 0xFE | "HELLO, WORLD" |
 +------+--------+------+----------------+      +------+----------------+

#+end_src

**** 2 bytes length field at offset 1 in the middle of 4 bytes header, strip the first header field and the length field, the length field represents the length of the whole message

Let's give another twist to the previous example. The only difference from the previous example is that the length field represents the length of the whole message instead of the message body, just like the third example. We have to count the length of HDR1 and Length into lengthAdjustment. Please note that we don't need to take the length of HDR2 into account because the length field already includes the whole header length.

#+begin_src text
 lengthFieldOffset   =  1
 lengthFieldLength   =  2
 lengthAdjustment    = -3 (= the length of HDR1 + LEN, negative)
 initialBytesToStrip =  3

 BEFORE DECODE (16 bytes)                       AFTER DECODE (13 bytes)
 +------+--------+------+----------------+      +------+----------------+
 | HDR1 | Length | HDR2 | Actual Content |----->| HDR2 | Actual Content |
 | 0xCA | 0x0010 | 0xFE | "HELLO, WORLD" |      | 0xFE | "HELLO, WORLD" |
 +------+--------+------+----------------+      +------+----------------+

#+end_src

For encoder, it prepends the length of the message. The length value is prepended as a binary form.
For example, LengthFieldLength(2) will encode the following 12-bytes string:

#+begin_src text
 +----------------+
 | "HELLO, WORLD" |
 +----------------+

#+end_src

into the following:

#+begin_src text
 +--------+----------------+
 + 0x000C | "HELLO, WORLD" |
 +--------+----------------+
#+end_src

If you turned on the lengthIncludesLengthFieldLength flag in the EncoderConfig, the encoded data would look like the following (12 (original data) + 2 (prepended data) = 14 (0xE)):

#+begin_src text
 +--------+----------------+
 + 0x000E | "HELLO, WORLD" |
 +--------+----------------+
#+end_src

* License
Specify license here
